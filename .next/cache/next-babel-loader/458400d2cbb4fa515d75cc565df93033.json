{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nconst HEADER_AUTH = 'Authorization';\nconst HEADER_BEARER = 'BEARER';\nexport default class Client {\n  constructor() {\n    _defineProperty(this, \"token\", '');\n\n    _defineProperty(this, \"url\", 'http://103.101.76.162:9002');\n\n    _defineProperty(this, \"urlPolitical\", 'http://103.101.76.162:9002');\n\n    _defineProperty(this, \"urlVersion\", '/api/v1');\n\n    _defineProperty(this, \"defaultHeaders\", {});\n\n    _defineProperty(this, \"userId\", '');\n\n    _defineProperty(this, \"userRole\", void 0);\n\n    _defineProperty(this, \"login\", (username, password) => {});\n\n    _defineProperty(this, \"logout\", () => {});\n\n    _defineProperty(this, \"getProvinces\", async () => {\n      const {\n        data\n      } = await this.doFetchWithResponse(`${this.getPolitical()}/provinces`, {\n        method: 'get',\n        data: {}\n      });\n      return data;\n    });\n\n    _defineProperty(this, \"getDistricts\", async code => {\n      const {\n        data\n      } = await this.doFetchWithResponse(`${this.getPolitical()}/districts?province=${code}`, {\n        method: 'get',\n        data: {}\n      });\n      return data;\n    });\n\n    _defineProperty(this, \"getCommunes\", async code => {\n      const {\n        data\n      } = await this.doFetchWithResponse(`${this.getPolitical()}/communes?district=${code}`, {\n        method: 'get',\n        data: {}\n      });\n      return data;\n    });\n\n    _defineProperty(this, \"getDataNoParking\", async () => {\n      const {\n        data\n      } = await this.doFetchWithResponse(`${this.getNoParkingRoute()}`, {\n        method: 'get',\n        data: {}\n      });\n      return data;\n    });\n\n    _defineProperty(this, \"getDataNoParkingDetail\", async id => {\n      const {\n        data\n      } = await this.doFetchWithResponse(`${this.getDetailNoParking(id)}`, {\n        method: 'get',\n        data: {\n          id\n        }\n      });\n      return data;\n    });\n\n    _defineProperty(this, \"addOneNoParking\", async payload => {\n      const {\n        data\n      } = await this.doFetchWithResponse(`${this.getNoParkingRoute()}`, {\n        method: 'post',\n        data: _objectSpread({}, payload)\n      });\n      return data;\n    });\n\n    _defineProperty(this, \"updateOneNoParking\", async payload => {\n      const {\n        data\n      } = await this.doFetchWithResponse(`${this.getDetailNoParking(payload.id)}`, {\n        method: 'put',\n        data: _objectSpread({}, payload)\n      });\n      return data;\n    });\n\n    _defineProperty(this, \"deleteOneNoParking\", async id => {\n      const {\n        data\n      } = await this.doFetchWithResponse(`${this.getDetailNoParking(id)}`, {\n        method: 'delete',\n        data: {\n          id\n        }\n      });\n      return data;\n    });\n\n    _defineProperty(this, \"searchParking\", async payload => {\n      const {\n        data\n      } = await this.doFetchWithResponse(`${this.getParkingRoute()}?district=${payload.district}&commune=${payload.commune}&type=${payload.type}&query=${payload.q}&fee=${payload.fee}`, {\n        method: 'get',\n        data: {}\n      });\n      return data;\n    });\n\n    _defineProperty(this, \"searchNoParking\", async payload => {\n      const {\n        data\n      } = await this.doFetchWithResponse(`${this.getNoParkingRoute()}?type=${payload.type}&query=${payload.q}`, {\n        method: 'get',\n        data: {}\n      });\n      return data;\n    });\n\n    _defineProperty(this, \"getParking\", async () => {\n      const {\n        data\n      } = await this.doFetchWithResponse(`${this.getParkingRoute()}`, {\n        method: 'get',\n        data: {}\n      });\n      return data;\n    });\n\n    _defineProperty(this, \"doFetch\", async (url, options) => {\n      const {\n        data\n      } = await this.doFetchWithResponse(url, options);\n      return data;\n    });\n\n    _defineProperty(this, \"doFetchWithResponse\", async (url, options) => {\n      try {\n        const response = await axios(_objectSpread({\n          url: url\n        }, this.getOptions(options)));\n        const {\n          data,\n          headers\n        } = response;\n        return {\n          data,\n          headers\n        };\n      } catch (error) {\n        return error.messages;\n      }\n    });\n  }\n\n  getUrl() {\n    return this.url;\n  }\n\n  setUrl(url) {\n    this.url = url;\n  }\n\n  getUrlVersion() {\n    return this.urlVersion;\n  }\n\n  getToken() {\n    return this.token;\n  }\n\n  setToken(token) {\n    this.token = token;\n  }\n\n  setUserId(userId) {\n    this.userId = userId;\n  }\n\n  setUserRole(userRole) {\n    this.userRole = userRole;\n  }\n\n  getBaseRoute() {\n    return `${this.url}${this.urlVersion}`;\n  }\n\n  getBaseRoutePolitical() {\n    return `${this.urlPolitical}${this.urlVersion}`;\n  }\n\n  getUsersRoute() {\n    return `${this.getBaseRoute()}/users`;\n  }\n\n  getParkingRoute() {\n    return `${this.getBaseRoute()}/parking`;\n  }\n\n  getNoParkingRoute() {\n    return `${this.getBaseRoute()}/no_parking`;\n  }\n\n  getPolitical() {\n    return `${this.getBaseRoutePolitical()}/political`;\n  }\n\n  getDetailNoParking(id) {\n    return `${this.getBaseRoute()}/no_parking/${id}`;\n  }\n\n  getOptions(options) {\n    const newOptions = _objectSpread({}, options);\n\n    let headers = _objectSpread({}, this.defaultHeaders);\n\n    if (options.headers) {\n      headers = _objectSpread(_objectSpread({}, headers), options.headers);\n    }\n\n    if (this.token) {\n      headers[HEADER_AUTH] = `${HEADER_BEARER} ${this.token}`;\n    }\n\n    return _objectSpread(_objectSpread({}, newOptions), {}, {\n      headers\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}