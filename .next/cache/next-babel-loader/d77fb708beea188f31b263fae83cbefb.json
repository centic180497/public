{"ast":null,"code":"const MAX_WEBSOCKET_FAILS = 7;\nconst MIN_WEBSOCKET_RETRY_TIME = 3000;\nconst MAX_WEBSOCKET_RETRY_TIME = 30000;\nexport default class WebsocketClient {// conn?: WebSocket\n  // connectionUrl: string\n  // token: string | null\n  // sequence: number\n  // connectionFailCount: number\n  // eventCallback?: Function\n  // firstConnectCallback?: Function\n  // reconnectCallback?: Function\n  // errorCallback?: Function\n  // closeCallback?: Function\n  // connectingCallback?: Function\n  // stop: boolean\n  // connectionTimeout: any\n  // constructor() {\n  //     this.connectionUrl = ''\n  //     this.token = null\n  //     this.sequence = 1\n  //     this.connectionFailCount = 0\n  //     this.stop = false\n  // }\n  // initialize(\n  //     connectionUrl = this.connectionUrl,\n  //     token: string | null,\n  //     opts?: any,\n  // ) {\n  //     return new Promise((resolve, reject) => {\n  //         if (this.conn) {\n  //             resolve()\n  //             return\n  //         }\n  //         if (this.connectionUrl === '') {\n  //             console.log(\n  //                 'ðŸ”¥ [Websocket]  Websocket must have connection url',\n  //             )\n  //             reject(new Error('Websocket must have connection url'))\n  //             return\n  //         }\n  //         this.conn = new WebSocket(connectionUrl)\n  //         this.connectionUrl = connectionUrl\n  //         this.token = token\n  //         this.conn!.onopen = () => {\n  //             if (token) {\n  //                 this.sendMessage('auth', { token })\n  //             }\n  //             if (this.connectionFailCount > 0) {\n  //                 console.log(\n  //                     'ðŸ”¥ [Websocket] Websocket re-established conneciton',\n  //                 )\n  //             } else if (this.firstConnectCallback) {\n  //                 this.firstConnectCallback()\n  //             }\n  //             this.connectionFailCount = 0\n  //             resolve()\n  //         }\n  //         this.conn!.onclose = () => {\n  //             this.conn = undefined\n  //             this.sequence = 1\n  //             if (this.connectionFailCount === 0) {\n  //                 console.log('ðŸ”¥ [Websocket] Websocket closed')\n  //             }\n  //             this.connectionFailCount++\n  //             if (this.closeCallback) {\n  //                 this.closeCallback(this.connectionFailCount)\n  //             }\n  //             let retryTime = MIN_WEBSOCKET_RETRY_TIME\n  //             if (this.connectionFailCount > MAX_WEBSOCKET_FAILS) {\n  //                 retryTime =\n  //                     MIN_WEBSOCKET_RETRY_TIME * this.connectionFailCount\n  //                 if (retryTime > MAX_WEBSOCKET_RETRY_TIME) {\n  //                     retryTime = MAX_WEBSOCKET_RETRY_TIME\n  //                 }\n  //             }\n  //             if (this.connectionTimeout) {\n  //                 clearTimeout(this.connectionTimeout)\n  //             }\n  //             this.connectionTimeout = setTimeout(() => {\n  //                 if (this.stop) {\n  //                     clearTimeout(this.connectionTimeout)\n  //                     return\n  //                 }\n  //                 this.initialize(this.connectionUrl, token)\n  //             }, retryTime)\n  //         }\n  //         this.conn!.onerror = (event) => {\n  //             if (this.connectionFailCount <= 1) {\n  //                 console.log('ðŸ”¥ [Websocket] Websocket error')\n  //                 console.log(event)\n  //             }\n  //             if (this.errorCallback) {\n  //                 this.errorCallback(event)\n  //             }\n  //         }\n  //         this.conn!.onmessage = (event) => {}\n  //     })\n  // }\n  // setConnectingCallback(callback: Function) {\n  //     this.connectingCallback = callback\n  // }\n  // setEventCallback(callback: Function) {\n  //     this.eventCallback = callback\n  // }\n  // setFirstConnectCallback(callback: Function) {\n  //     this.firstConnectCallback = callback\n  // }\n  // setReconnectCallback(callback: Function) {\n  //     this.reconnectCallback = callback\n  // }\n  // setErrorCallback(callback: Function) {\n  //     this.errorCallback = callback\n  // }\n  // setCloseCallback(callback: Function) {\n  //     this.closeCallback = callback\n  // }\n  // close(stop = false) {\n  //     this.stop = stop\n  //     this.connectionFailCount = 0\n  //     this.sequence = 1\n  //     if (this.conn && this.conn.readyState === WebSocket.OPEN) {\n  //         this.conn.onclose = () => {}\n  //         this.conn.close()\n  //         this.conn = undefined\n  //         console.log('ðŸ”¥ [Websocket] Websocket closed')\n  //     }\n  // }\n  // sendMessage(action: string, data: any) {}\n}","map":{"version":3,"sources":["/home/quy/Videos/parking_webapp/src/client/websocket.ts"],"names":["MAX_WEBSOCKET_FAILS","MIN_WEBSOCKET_RETRY_TIME","MAX_WEBSOCKET_RETRY_TIME","WebsocketClient"],"mappings":"AAAA,MAAMA,mBAAmB,GAAG,CAA5B;AACA,MAAMC,wBAAwB,GAAG,IAAjC;AACA,MAAMC,wBAAwB,GAAG,KAAjC;AAEA,eAAe,MAAMC,eAAN,CAAsB,CACjtJiC","sourcesContent":["const MAX_WEBSOCKET_FAILS = 7\r\nconst MIN_WEBSOCKET_RETRY_TIME = 3000\r\nconst MAX_WEBSOCKET_RETRY_TIME = 30000\r\n\r\nexport default class WebsocketClient {\r\n    // conn?: WebSocket\r\n    // connectionUrl: string\r\n    // token: string | null\r\n    // sequence: number\r\n    // connectionFailCount: number\r\n    // eventCallback?: Function\r\n    // firstConnectCallback?: Function\r\n    // reconnectCallback?: Function\r\n    // errorCallback?: Function\r\n    // closeCallback?: Function\r\n    // connectingCallback?: Function\r\n    // stop: boolean\r\n    // connectionTimeout: any\r\n\r\n    // constructor() {\r\n    //     this.connectionUrl = ''\r\n    //     this.token = null\r\n    //     this.sequence = 1\r\n    //     this.connectionFailCount = 0\r\n    //     this.stop = false\r\n    // }\r\n\r\n    // initialize(\r\n    //     connectionUrl = this.connectionUrl,\r\n    //     token: string | null,\r\n    //     opts?: any,\r\n    // ) {\r\n    //     return new Promise((resolve, reject) => {\r\n    //         if (this.conn) {\r\n    //             resolve()\r\n    //             return\r\n    //         }\r\n\r\n    //         if (this.connectionUrl === '') {\r\n    //             console.log(\r\n    //                 'ðŸ”¥ [Websocket]  Websocket must have connection url',\r\n    //             )\r\n    //             reject(new Error('Websocket must have connection url'))\r\n    //             return\r\n    //         }\r\n\r\n    //         this.conn = new WebSocket(connectionUrl)\r\n    //         this.connectionUrl = connectionUrl\r\n    //         this.token = token\r\n\r\n    //         this.conn!.onopen = () => {\r\n    //             if (token) {\r\n    //                 this.sendMessage('auth', { token })\r\n    //             }\r\n\r\n    //             if (this.connectionFailCount > 0) {\r\n    //                 console.log(\r\n    //                     'ðŸ”¥ [Websocket] Websocket re-established conneciton',\r\n    //                 )\r\n    //             } else if (this.firstConnectCallback) {\r\n    //                 this.firstConnectCallback()\r\n    //             }\r\n    //             this.connectionFailCount = 0\r\n    //             resolve()\r\n    //         }\r\n\r\n    //         this.conn!.onclose = () => {\r\n    //             this.conn = undefined\r\n    //             this.sequence = 1\r\n\r\n    //             if (this.connectionFailCount === 0) {\r\n    //                 console.log('ðŸ”¥ [Websocket] Websocket closed')\r\n    //             }\r\n\r\n    //             this.connectionFailCount++\r\n\r\n    //             if (this.closeCallback) {\r\n    //                 this.closeCallback(this.connectionFailCount)\r\n    //             }\r\n\r\n    //             let retryTime = MIN_WEBSOCKET_RETRY_TIME\r\n\r\n    //             if (this.connectionFailCount > MAX_WEBSOCKET_FAILS) {\r\n    //                 retryTime =\r\n    //                     MIN_WEBSOCKET_RETRY_TIME * this.connectionFailCount\r\n    //                 if (retryTime > MAX_WEBSOCKET_RETRY_TIME) {\r\n    //                     retryTime = MAX_WEBSOCKET_RETRY_TIME\r\n    //                 }\r\n    //             }\r\n\r\n    //             if (this.connectionTimeout) {\r\n    //                 clearTimeout(this.connectionTimeout)\r\n    //             }\r\n\r\n    //             this.connectionTimeout = setTimeout(() => {\r\n    //                 if (this.stop) {\r\n    //                     clearTimeout(this.connectionTimeout)\r\n    //                     return\r\n    //                 }\r\n    //                 this.initialize(this.connectionUrl, token)\r\n    //             }, retryTime)\r\n    //         }\r\n\r\n    //         this.conn!.onerror = (event) => {\r\n    //             if (this.connectionFailCount <= 1) {\r\n    //                 console.log('ðŸ”¥ [Websocket] Websocket error')\r\n    //                 console.log(event)\r\n    //             }\r\n\r\n    //             if (this.errorCallback) {\r\n    //                 this.errorCallback(event)\r\n    //             }\r\n    //         }\r\n\r\n    //         this.conn!.onmessage = (event) => {}\r\n    //     })\r\n    // }\r\n\r\n    // setConnectingCallback(callback: Function) {\r\n    //     this.connectingCallback = callback\r\n    // }\r\n\r\n    // setEventCallback(callback: Function) {\r\n    //     this.eventCallback = callback\r\n    // }\r\n\r\n    // setFirstConnectCallback(callback: Function) {\r\n    //     this.firstConnectCallback = callback\r\n    // }\r\n\r\n    // setReconnectCallback(callback: Function) {\r\n    //     this.reconnectCallback = callback\r\n    // }\r\n\r\n    // setErrorCallback(callback: Function) {\r\n    //     this.errorCallback = callback\r\n    // }\r\n\r\n    // setCloseCallback(callback: Function) {\r\n    //     this.closeCallback = callback\r\n    // }\r\n\r\n    // close(stop = false) {\r\n    //     this.stop = stop\r\n    //     this.connectionFailCount = 0\r\n    //     this.sequence = 1\r\n    //     if (this.conn && this.conn.readyState === WebSocket.OPEN) {\r\n    //         this.conn.onclose = () => {}\r\n    //         this.conn.close()\r\n    //         this.conn = undefined\r\n    //         console.log('ðŸ”¥ [Websocket] Websocket closed')\r\n    //     }\r\n    // }\r\n\r\n    // sendMessage(action: string, data: any) {}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}