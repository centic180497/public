{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nvar MAX_WEBSOCKET_FAILS = 7;\nvar MIN_WEBSOCKET_RETRY_TIME = 3000;\nvar MAX_WEBSOCKET_RETRY_TIME = 30000;\n\nvar WebsocketClient = function WebsocketClient() {\n  _classCallCheck(this, WebsocketClient);\n};\n\nexport { WebsocketClient as default };","map":{"version":3,"sources":["/home/quy/Videos/parking_webapp/src/client/websocket.ts"],"names":["MAX_WEBSOCKET_FAILS","MIN_WEBSOCKET_RETRY_TIME","MAX_WEBSOCKET_RETRY_TIME","WebsocketClient"],"mappings":";AAAA,IAAMA,mBAAmB,GAAG,CAA5B;AACA,IAAMC,wBAAwB,GAAG,IAAjC;AACA,IAAMC,wBAAwB,GAAG,KAAjC;;IAEqBC,e;;;;SAAAA,e","sourcesContent":["const MAX_WEBSOCKET_FAILS = 7\r\nconst MIN_WEBSOCKET_RETRY_TIME = 3000\r\nconst MAX_WEBSOCKET_RETRY_TIME = 30000\r\n\r\nexport default class WebsocketClient {\r\n    // conn?: WebSocket\r\n    // connectionUrl: string\r\n    // token: string | null\r\n    // sequence: number\r\n    // connectionFailCount: number\r\n    // eventCallback?: Function\r\n    // firstConnectCallback?: Function\r\n    // reconnectCallback?: Function\r\n    // errorCallback?: Function\r\n    // closeCallback?: Function\r\n    // connectingCallback?: Function\r\n    // stop: boolean\r\n    // connectionTimeout: any\r\n\r\n    // constructor() {\r\n    //     this.connectionUrl = ''\r\n    //     this.token = null\r\n    //     this.sequence = 1\r\n    //     this.connectionFailCount = 0\r\n    //     this.stop = false\r\n    // }\r\n\r\n    // initialize(\r\n    //     connectionUrl = this.connectionUrl,\r\n    //     token: string | null,\r\n    //     opts?: any,\r\n    // ) {\r\n    //     return new Promise((resolve, reject) => {\r\n    //         if (this.conn) {\r\n    //             resolve()\r\n    //             return\r\n    //         }\r\n\r\n    //         if (this.connectionUrl === '') {\r\n    //             console.log(\r\n    //                 'ðŸ”¥ [Websocket]  Websocket must have connection url',\r\n    //             )\r\n    //             reject(new Error('Websocket must have connection url'))\r\n    //             return\r\n    //         }\r\n\r\n    //         this.conn = new WebSocket(connectionUrl)\r\n    //         this.connectionUrl = connectionUrl\r\n    //         this.token = token\r\n\r\n    //         this.conn!.onopen = () => {\r\n    //             if (token) {\r\n    //                 this.sendMessage('auth', { token })\r\n    //             }\r\n\r\n    //             if (this.connectionFailCount > 0) {\r\n    //                 console.log(\r\n    //                     'ðŸ”¥ [Websocket] Websocket re-established conneciton',\r\n    //                 )\r\n    //             } else if (this.firstConnectCallback) {\r\n    //                 this.firstConnectCallback()\r\n    //             }\r\n    //             this.connectionFailCount = 0\r\n    //             resolve()\r\n    //         }\r\n\r\n    //         this.conn!.onclose = () => {\r\n    //             this.conn = undefined\r\n    //             this.sequence = 1\r\n\r\n    //             if (this.connectionFailCount === 0) {\r\n    //                 console.log('ðŸ”¥ [Websocket] Websocket closed')\r\n    //             }\r\n\r\n    //             this.connectionFailCount++\r\n\r\n    //             if (this.closeCallback) {\r\n    //                 this.closeCallback(this.connectionFailCount)\r\n    //             }\r\n\r\n    //             let retryTime = MIN_WEBSOCKET_RETRY_TIME\r\n\r\n    //             if (this.connectionFailCount > MAX_WEBSOCKET_FAILS) {\r\n    //                 retryTime =\r\n    //                     MIN_WEBSOCKET_RETRY_TIME * this.connectionFailCount\r\n    //                 if (retryTime > MAX_WEBSOCKET_RETRY_TIME) {\r\n    //                     retryTime = MAX_WEBSOCKET_RETRY_TIME\r\n    //                 }\r\n    //             }\r\n\r\n    //             if (this.connectionTimeout) {\r\n    //                 clearTimeout(this.connectionTimeout)\r\n    //             }\r\n\r\n    //             this.connectionTimeout = setTimeout(() => {\r\n    //                 if (this.stop) {\r\n    //                     clearTimeout(this.connectionTimeout)\r\n    //                     return\r\n    //                 }\r\n    //                 this.initialize(this.connectionUrl, token)\r\n    //             }, retryTime)\r\n    //         }\r\n\r\n    //         this.conn!.onerror = (event) => {\r\n    //             if (this.connectionFailCount <= 1) {\r\n    //                 console.log('ðŸ”¥ [Websocket] Websocket error')\r\n    //                 console.log(event)\r\n    //             }\r\n\r\n    //             if (this.errorCallback) {\r\n    //                 this.errorCallback(event)\r\n    //             }\r\n    //         }\r\n\r\n    //         this.conn!.onmessage = (event) => {}\r\n    //     })\r\n    // }\r\n\r\n    // setConnectingCallback(callback: Function) {\r\n    //     this.connectingCallback = callback\r\n    // }\r\n\r\n    // setEventCallback(callback: Function) {\r\n    //     this.eventCallback = callback\r\n    // }\r\n\r\n    // setFirstConnectCallback(callback: Function) {\r\n    //     this.firstConnectCallback = callback\r\n    // }\r\n\r\n    // setReconnectCallback(callback: Function) {\r\n    //     this.reconnectCallback = callback\r\n    // }\r\n\r\n    // setErrorCallback(callback: Function) {\r\n    //     this.errorCallback = callback\r\n    // }\r\n\r\n    // setCloseCallback(callback: Function) {\r\n    //     this.closeCallback = callback\r\n    // }\r\n\r\n    // close(stop = false) {\r\n    //     this.stop = stop\r\n    //     this.connectionFailCount = 0\r\n    //     this.sequence = 1\r\n    //     if (this.conn && this.conn.readyState === WebSocket.OPEN) {\r\n    //         this.conn.onclose = () => {}\r\n    //         this.conn.close()\r\n    //         this.conn = undefined\r\n    //         console.log('ðŸ”¥ [Websocket] Websocket closed')\r\n    //     }\r\n    // }\r\n\r\n    // sendMessage(action: string, data: any) {}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}